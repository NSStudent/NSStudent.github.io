<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>NSStudent</title><description>my swift lab</description><link>https://nsstudent.dev</link><language>en</language><lastBuildDate>Sun, 26 Jul 2020 11:20:23 +0200</lastBuildDate><pubDate>Sun, 26 Jul 2020 11:20:23 +0200</pubDate><ttl>250</ttl><atom:link href="https://nsstudent.dev/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://nsstudent.dev/posts/2020/June/Local-packages</guid><title>Trabajar con Packages en local</title><description>Como poder modificar un package mientras esta usandose en un proyecto.</description><link>https://nsstudent.dev/posts/2020/June/Local-packages</link><pubDate>Sun, 26 Jul 2020 12:00:00 +0200</pubDate><content:encoded><![CDATA[<h2>Introducción</h2><p>Normalmente, cuando desarrollamos, intentamos hacer nuestro código reutilizable. Muchas cosas que hacemos en nuestros proyectos son comunes, conectarte a una API, cachear las imágenes de la red, etc.</p><p>Para poder manejar estos recursos normalmente hacemos uso de gestores de dependencias pero, para el desarrollo en iOS, no teníamos un gestor facilitado por Apple. Hasta hace bien poco la mayoría de los desarrolladores estábamos usando Cocoapods(poner link) o Carthage(poner link) para poder cubrir esta necesidad.</p><p>Con Swift Package Manager (SPM) Apple intenta dar solución a esta demanda de los desarrolladores y en la última session de la WWDC han incluido cosas que hace a SPM un posible candidato para la gestión de dependencias en producción.</p><p>Mientras estás desarrollando tu dependencia una de las necesidades es poder modificar el código en tiempo de desarrollo dentro del proyecto. Apple no deja muy claro en su documentación como hacer esto, veamos paso por paso como poderlo hacer.</p><h2>Ejemplo</h2><p>El primer paso seria crear el package, para ello crea una carpeta en la ruta donde quieras hacer el ejemplo y dentro de esta carpeta ejecuta la inicialización del package.</p><pre><code>mkdir <span class="type">PackageExample</span>
cd <span class="type">PackageExample</span>
swift package <span class="keyword">init</span>
</code></pre><p>Para este tutorial vamos a crear el proyecto nuevo al que queremos incluir este package a la misma altura que la carpeta contenedora, esta seria la estructura de la carpeta actualmente.</p><pre><code><span class="type">Carpeta Contenedora</span>
    - <span class="type">ExampleProject</span>
    - <span class="type">PackageExample</span>
</code></pre><p>El siguiente paso es arrastrar la carpeta del package en el proyecto</p><p class="aligncenter">
    <img  alt="" src="https://nsstudent.dev/images/Local-package-0.png"></img>
</p><p>Un detalle importante para que todo funcione es que no puedes tener abierto el package en el Xcode, de lo contrario no te mostrará la jerarquía de archivos al arrastrarlo.</p><p class="aligncenter">
    <img alt="" src="https://nsstudent.dev/images/Local-package-1.png"></img>
</p><p>El último paso que nos falta para que todo funcione es conectar la librería con el proyecto, esto se hace en la sección de <code>Build Phases</code> del proyecto en el apartado de <code>Link Binary With Libraries</code>, le damos al botón de <code>+</code> y seleccionamos la librería de nuestro package.</p><p class="aligncenter">
    <img alt="" src="https://nsstudent.dev/images/Local-package-2.png"></img>
</p><p>Con esto ya podras hacer el <code>import</code> de tu package en el proyecto y modificar el código a tu gusto.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://nsstudent.dev/posts/2020/January/Deploy-with-Github-Actions</guid><title>Deploy Publish blog with Github Actions</title><description>Use GitHub deploy method and Github Actions to deploy in your server.</description><link>https://nsstudent.dev/posts/2020/January/Deploy-with-Github-Actions</link><pubDate>Sat, 25 Jan 2020 14:00:00 +0100</pubDate><content:encoded><![CDATA[<p><a href="https://github.com/JohnSundell/Publish">Publish</a> is an awesome static site generator created by <a href="https://twitter.com%20%E2%80%BA%20johnsundell">John Sundell</a>. This website is built with this tool.</p><p>One of the steps is to upload to the server all the file generated, the first approach I used was to upload all the files in the output folder, via FTP manually but, then I had an idea.</p><p>For deployment, I use the following code:</p><pre><code>.<span class="call">publish</span>(
        withTheme: .<span class="dotAccess">nsstudent</span>,
        deployedUsing: <span class="type">DeploymentMethod</span>.<span class="call">gitHub</span>(<span class="string">"NSStudent/NSStudent"</span>),
...
}
</code></pre><p>This is the implementation of the <code>github</code> method:</p><pre><code><span class="comment">/// Deploy a website to a given GitHub repository.
    /// - parameter repository: The full name of the repository (including its username).
    /// - parameter useSSH: Whether an SSH connection should be used (preferred).</span>
    <span class="keyword">static func</span> gitHub(<span class="keyword">_</span> repository: <span class="type">String</span>, useSSH: <span class="type">Bool</span> = <span class="keyword">true</span>) -&gt; <span class="type">Self</span> {
        <span class="keyword">let</span> prefix = useSSH ? <span class="string">"git@github.com:"</span> : <span class="string">"https://github.com/"</span>
        <span class="keyword">return</span> <span class="call">git</span>(<span class="string">"</span>\(prefix)\(repository)<span class="string">.git"</span>)
    }
</code></pre><p>This method searches the repository with the name <code>NSStudent/NSStudent</code>. By default, the implementation tries to clone the repository via SSH with this code inside the <code>git</code> method.</p><pre><code><span class="keyword">static func</span> git(<span class="keyword">_</span> remote: <span class="type">String</span>) -&gt; <span class="type">Self</span> {
        <span class="type">DeploymentMethod</span>(name: <span class="string">"Git (</span>\(remote)<span class="string">)"</span>) { context <span class="keyword">in
            let</span> folder = <span class="keyword">try</span> context.<span class="call">createDeploymentFolder</span>(withPrefix: <span class="string">"Git"</span>) { folder <span class="keyword">in
                if</span> !folder.<span class="call">containsSubfolder</span>(named: <span class="string">".git"</span>) {
                    <span class="keyword">try</span> <span class="call">shellOut</span>(to: .<span class="call">gitInit</span>(), at: folder.<span class="property">path</span>)

                    <span class="keyword">try</span> <span class="call">shellOut</span>(
                        to: <span class="string">"git remote add origin</span> \(remote)<span class="string">"</span>,
                        at: folder.<span class="property">path</span>
                    )
                }

                <span class="keyword">try</span> <span class="call">shellOut</span>(
                    to: <span class="string">"git remote set-url origin</span> \(remote)<span class="string">"</span>,
                    at: folder.<span class="property">path</span>
                )

                <span class="keyword">_</span> = <span class="keyword">try</span>? <span class="call">shellOut</span>(
                    to: .<span class="call">gitPull</span>(remote: <span class="string">"origin"</span>, branch: <span class="string">"master"</span>),
                    at: folder.<span class="property">path</span>
                )

                <span class="keyword">try</span> folder.<span class="call">empty</span>()
            }

            <span class="keyword">let</span> dateFormatter = <span class="type">DateFormatter</span>()
            dateFormatter.<span class="property">dateFormat</span> = <span class="string">"yyyy-MM-dd HH:mm"</span>
            <span class="keyword">let</span> dateString = dateFormatter.<span class="call">string</span>(from: <span class="type">Date</span>())

            <span class="keyword">do</span> {
                <span class="keyword">try</span> <span class="call">shellOut</span>(
                    to: <span class="string">"""
                    git add . &amp;&amp; git commit -a -m \"Publish deploy</span> \(dateString)<span class="string">\" --allow-empty
                    """</span>,
                    at: folder.<span class="property">path</span>
                )

                <span class="keyword">try</span> <span class="call">shellOut</span>(
                    to: .<span class="call">gitPush</span>(remote: <span class="string">"origin"</span>, branch: <span class="string">"master"</span>),
                    at: folder.<span class="property">path</span>
                )
            } <span class="keyword">catch let</span> error <span class="keyword">as</span> <span class="type">ShellOutError</span> {
                <span class="keyword">throw</span> <span class="type">PublishingError</span>(infoMessage: error.<span class="property">message</span>)
            } <span class="keyword">catch</span> {
                <span class="keyword">throw</span> error
            }
        }
    }
</code></pre><p>The magic happens when the <code>context</code> calls <code>context.createDeploymentFolder </code> function. This method creates a new folder with the name <code>GitDeploy</code> inside to a hidden folder <code>.publish</code>.</p><p>Right now, all the codes are in your repository.</p><p>To create the action to upload the website in the server via FTP, you need to add the following <code>main.yml</code> file:</p><pre><code>name: <span class="type">Deploy</span> website

on: [push]

jobs:
  <span class="type">FTP</span>-<span class="type">Deploy</span>-<span class="type">Action</span>:
    name: <span class="type">FTP</span>-<span class="type">Deploy</span>-<span class="type">Action</span>
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: <span class="type">FTP</span>-<span class="type">Deploy</span>-<span class="type">Action</span>
      uses: <span class="type">SamKirkland</span>/<span class="type">FTP</span>-<span class="type">Deploy</span>-<span class="type">Action@2</span>.<span class="number">0.0</span>
      env:
        <span class="type">FTP_SERVER</span>: ${{ secrets.<span class="type">FTP_NAME</span> }}
        <span class="type">FTP_USERNAME</span>: ${{ secrets.<span class="type">FTP_USER</span> }}
        <span class="type">FTP_PASSWORD</span>: ${{ secrets.<span class="type">FTP_PASSWORD</span> }}
        <span class="type">ARGS</span>: --delete --exclude-glob=.git*/** --exclude-glob=.git** --delete-excluded
</code></pre><p>This file use the <a href="https://github.com/SamKirkland/FTP-Deploy-Action">FTP-Deploy-Action</a>. It has three secrets variables <code>secrets.FTP_NAME</code>, <code>secrets.FTP_USER</code>, <code>secrets.FTP_PASSWORD</code> to not expose the real values. The <code>ARGS</code> parameter tries to remove all unused files and it prevents the upload off all the files inside the <code>.git</code> or <code>.github</code> folders.</p><blockquote><p>You need to pull this change in the current <code>GitDeploy</code> repository. Right now, every time you use <code>Publish deploy</code> in the terminal and push a new version in this repository, the action uploads all the files to the FTP.</p></blockquote><p>I will try to write with new things about <a href="https://github.com/JohnSundell/Publish">Publish</a> and how I use them in this blog.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://nsstudent.dev/posts/2020/January/Struct-Inits</guid><title>Create a custom struct initializer</title><description>Add a custom initializer for structs</description><link>https://nsstudent.dev/posts/2020/January/Struct-Inits</link><pubDate>Tue, 14 Jan 2020 13:20:00 +0100</pubDate><content:encoded><![CDATA[<p>Structs create a default initializer when you implement one.</p><p>Sometimes you want to create another initializer to facilitate the code.</p><p>The problems appear when you try to introduce our initializer. the default constructor disappears. To avoid this problem, the best way is to include our initializer inside an extension.</p><p>This way, we'll keep the two builders</p><pre><code><span class="keyword">struct</span> Person {
    <span class="keyword">let</span> name: <span class="type">String</span>
    <span class="keyword">let</span> birthday: <span class="type">Date</span>
}

<span class="keyword">extension</span> <span class="type">Person</span> {
    <span class="keyword">init</span>(name: <span class="type">String</span>) {
        <span class="keyword">self</span>.<span class="property">name</span> = name
        <span class="keyword">self</span>.<span class="property">birthday</span> = <span class="type">Date</span>()
    }
}

<span class="keyword">let</span> person = <span class="type">Person</span>(name: <span class="string">"NSStudent"</span>, birthday: <span class="type">Date</span>(timeIntervalSince1970: <span class="number">426348250</span>))
<span class="keyword">let</span> baby = <span class="type">Person</span>(name: <span class="string">"john"</span>)
</code></pre>]]></content:encoded></item></channel></rss>